name: Build and Upload MSI

on:
  workflow_dispatch:
    inputs:
      installationCode:
        description: 'Unique Installation Code (e.g. a GUID)'
        required: true

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Publish InstallationUtility
        run: dotnet publish ./InstallationUtility/InstallationUtility.sln -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true
        
      - name: Build MSI with Wix Toolset 6
        run: dotnet build ./MyInstaller.wixproj -p:InstallationCode=${{ github.event.inputs.installationCode }} -c Release

      - name: Get Signed Upload URL and Upload MSI
        env:
          INSTALLATION_CODE: ${{ github.event.inputs.installationCode }}
        run: |
          $installationCode = "${{ github.event.inputs.installationCode }}"
          $msiPath = "./bin/x64/Release/MyInstaller.msi"

          # Get signed upload URL
          $response = Invoke-RestMethod -Method GET -Uri "https://us-central1-pcmon-337e3.cloudfunctions.net/getSignedUploadUrl?installationCode=$installationCode"

          # Parse the signed URL from the response
          $signedUrl = $response.url

          # Read the MSI file bytes
          $fileBytes = [System.IO.File]::ReadAllBytes($msiPath)

          # Upload the file using PUT request
          $uploadRequest = [System.Net.WebRequest]::Create($signedUrl)
          $uploadRequest.Method = "PUT"
          $uploadRequest.ContentLength = $fileBytes.Length
          $uploadStream = $uploadRequest.GetRequestStream()
          $uploadStream.Write($fileBytes, 0, $fileBytes.Length)
          $uploadStream.Close()

          $uploadResponse = $uploadRequest.GetResponse()
          $uploadResponse.Close()

          Write-Host "MSI uploaded successfully."
